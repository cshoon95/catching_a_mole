{"version":3,"file":"main.5b79b0b2468075f7ea2d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAaA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AApDA;AAqDA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AAGA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAoBA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAGA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAhDA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;;AAEA;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAIA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClGA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AAAA;AAEA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAvBA;AAyBA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AAGA;;AAIA;AACA;AAMA;AALA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AAIA;AACA;AAIA;;AAEA;AACA;AAGA;AAFA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpFA;;AAMA;;AAiBA;;AAcA;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["webpack://kakao/./src/stories/core/Modal.stories.tsx","webpack://kakao/./src/core/List.ts","webpack://kakao/./src/core/Module.ts","webpack://kakao/./src/core/Mole.ts","webpack://kakao/./src/core/Utils.ts","webpack://kakao/./src/modal/ModalCountDown.tsx","webpack://kakao/./src/modal/ModalGameTest.tsx","webpack://kakao/./src/modal/ModalRankTest.tsx","webpack://kakao/./src/modal/ModalReadyTest.tsx","webpack://kakao/./src/modal/ModalResult.tsx","webpack://kakao/./src/store/Data.ts","webpack://kakao/./src/store/View.ts","webpack://kakao/./src/type/Type.ts"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport ModalCountDown from \\\"../../modal/ModalCountDown\\\";\\nimport ModalResult from \\\"../../modal/ModalResult\\\";\\nimport ModalReadyTest from \\\"../../modal/ModalReadyTest\\\";\\nimport ModalGameTest from \\\"../../modal/ModalGameTest\\\";\\nimport ModalRankTest from \\\"../../modal/ModalRankTest\\\";\\n\\ntype ModalType = {\\n    /** 메시지 */\\n    modalName: string;\\n    /** 버튼 이벤트 핸들러 */\\n    callbackFunc?: Function;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Modal = (manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const loadPopup = () => { \\n            switch (props.modalName) {\\n                case 'ModalCountDown':  return <ModalCountDown/>;\\n                case 'ModalResult':     return <ModalResult/>;\\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\\n                case 'ModalGameTest':   return <ModalGameTest/>;\\n                case 'ModalRankTest':   return <ModalRankTest/>;\\n                default: return;\\n            }\\n        }\\n\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {loadPopup()}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Alert\\n            </button>\\n            <ModalManager \\n                modalName={manager.modalName} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Modal,\\n    title: 'Core/Modal',\\n    decorators: [withKnobs]   \\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Modal\":{\"startLoc\":{\"col\":21,\"line\":20},\"endLoc\":{\"col\":1,\"line\":72},\"startBody\":{\"col\":21,\"line\":20},\"endBody\":{\"col\":1,\"line\":72}}};\n    \nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs'\nimport ModalCountDown from \"../../modal/ModalCountDown\";\nimport ModalResult from \"../../modal/ModalResult\";\nimport ModalReadyTest from \"../../modal/ModalReadyTest\";\nimport ModalGameTest from \"../../modal/ModalGameTest\";\nimport ModalRankTest from \"../../modal/ModalRankTest\";\n\ntype ModalType = {\n    /** 메시지 */\n    modalName: string;\n    /** 버튼 이벤트 핸들러 */\n    callbackFunc?: Function;\n    /** 확인 버튼 명 */\n    confirm?: string;\n    /** ref */\n    ref?: any\n}\n\nexport const Modal = (manager: ModalType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const ModalManager = (props: ModalType) => {\n        const loadPopup = () => { \n            switch (props.modalName) {\n                case 'ModalCountDown':  return <ModalCountDown/>;\n                case 'ModalResult':     return <ModalResult/>;\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\n                case 'ModalGameTest':   return <ModalGameTest/>;\n                case 'ModalRankTest':   return <ModalRankTest/>;\n                default: return;\n            }\n        }\n\n        const btnClickHandler = () => {\n            props.callbackFunc && props.callbackFunc();\n            setIsShow(false);\n        }\n\n        return (\n            <>\n            { isShow && \n            <div className=\"modal\">\n                <div className={\"modal-body\"}>\n                    {loadPopup()}\n                    {props?.confirm && \n                        <button className=\"button\" \n                                onClick={btnClickHandler}\n                                ref={props.ref}\n                        >{props?.confirm}</button>\n                    }\n                </div>                \n            </div>\n            }\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <button className=\"btn-reset\" onClick={() => (setIsShow(true))}>\n                Alert\n            </button>\n            <ModalManager \n                modalName={manager.modalName} \n                confirm={manager.confirm}\n                ref={manager.ref}\n                callbackFunc={manager.callbackFunc}/>\n        </div>\n    );\n    \n};\nexport default {\n    component: Modal,\n    title: 'Core/Modal',\n    decorators: [withKnobs]   \n}\n\n\nModal.parameters = { storySource: { source: \"(manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const loadPopup = () => { \\n            switch (props.modalName) {\\n                case 'ModalCountDown':  return <ModalCountDown/>;\\n                case 'ModalResult':     return <ModalResult/>;\\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\\n                case 'ModalGameTest':   return <ModalGameTest/>;\\n                case 'ModalRankTest':   return <ModalRankTest/>;\\n                default: return;\\n            }\\n        }\\n\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {loadPopup()}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Alert\\n            </button>\\n            <ModalManager \\n                modalName={manager.modalName} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\" }, ...Modal.parameters };","import mole from \"./Mole\";\nimport { listInfoType, listNumberType, listStringType } from \"../type/Type\"\n\nexport default class List {\n    /** 행, 열 드롭다운 리스트 */\n    rowColumnList: listNumberType = [\n        {value: 2, label: 2},\n        {value: 3, label: 3},\n        {value: 4, label: 4},\n        {value: 5, label: 5},\n        {value: 6, label: 6},\n    ]\n\n    /** 두더지 수 리스트 */ \n    moleCountList() {\n        const maxCount = mole.module.getRowXColumns() / 2;\n        const list: listNumberType = [];\n\n        // 행/열 선택 안한 케이스라면 종료\n        if (maxCount === 0) return list;\n        \n        // 최소 1, 최대 (행 x 열) / 2\n        for (let i=1; i<maxCount; i++) {\n            list.push({value: i, label: i})\n        }\n\n        return list;\n    }\n\n    /** 인풋 정보 리스트 */\n    screenDataList: listStringType = [\n        {value: 'row',      label: '행'},\n        {value: 'column',   label: '열'},\n        {value: 'count',    label: '두더지'},\n    ]\n\n    /** 순위 테이블 제목 리스트 */\n    rankTableHeadList: string[] = ['순위', '점수', '일시']\n\n    /** 타이머 모드에 따라 가져오는 버튼 리스트 */\n    gameBtnList: {\n        value?: string, \n        info?: listInfoType[]\n    }[] = [\n        {value: 'start', info: [\n            {label: '일시정지', nextCode: 'pause'},\n            {label: '그만하기', nextCode: 'stop'}\n        ]},\n        {value: 'pause', info: [\n            {label: '재개하기', nextCode: 'start'},\n        ]},\n        {value: 'stop', info: [\n            {label: '시작하기', nextCode: 'start'},\n        ]},\n        {value: 'end', info: [\n            {label: '다시하기', nextCode: 'start'},\n            {label: '처음으로', nextCode: 'stop'},\n        ]},\n        {value: 'none', info: [\n            {label: '시작하기', nextCode: 'stop'},\n        ]}\n    ]\n}","import mole from \"./Mole\";\n\nlet score = 0;\nlet playId: any; \nlet stopId: any;\nexport default class Module {\n    /** 행x열의 값 */\n    getRowXColumns = () => {\n        const screenData = mole.getState('screenData');\n        return screenData.row * screenData.column;\n    }\n\n    /** 두더지가 출현할 Elment Index */\n    getRandomHoles = () => {\n        const screenData = mole.getState('screenData');\n        const result = []\n\n        for (let i=0; i<screenData.count; i++) {\n            result.push(mole.utils.randomNum(this.getRowXColumns()));\n        }\n\n        return result;\n    }\n\n    /** 출현한 두더지 Element List */ \n    getHolesEl = () => {\n        const result = [];\n\n        for (let i=0; i<this.getRandomHoles().length; i++) {\n            result.push(document.getElementById(`${this.getRandomHoles()[i]}`));\n        }\n\n        return result;\n    }\n\n    /** 두더지 클릭 이벤트 */\n    clickMoleEventHandler = (e: any, element: any) => {\n        // hit 이미지로 수정\n        e.target.src = '/images/mole_hit_hole.png';\n\n        // 다시 이미지 복구\n        setTimeout(() => {\n            e.target.src = '/images/mole.png';\n        }, 500)\n\n        score = score + 1;\n\n        this.catchMole(element)\n    }\n\n    /** 두더지 show */ \n    playingMole = () => {\n        const elList = this.getHolesEl();\n\n        // 두더지 등장\n        const showMole = () => {\n            elList.forEach(element => {\n                // 애니메이션 추가\n                mole.utils.addClassActive(element);\n\n                // 클릭 이벤트 추가 ({ once : true } 이벤트 한 번 만 실행)\n                element?.addEventListener('click', (e) => this.clickMoleEventHandler(e, element), { once : true });\n            });\n\n            stopId = setTimeout(this.hideMole, 3000);\n        }\n\n        showMole();\n        playId = setTimeout(this.playingMole, 3000);\n    }\n\n     // 두더지 터치\n    catchMole = (element: Element) => {\n        mole.utils.removeClassActive(element);\n    }\n\n    /** 두더지 hide */ \n    hideMole = () => {\n        for (let i = 0; i<this.getRowXColumns(); i++) {\n            const element = document.getElementById(i.toString());\n            mole.utils.removeClassActive(element);\n        }\n        clearTimeout(stopId);\n    }\n\n    /** 게임 정지 */\n    stopMole = () => {\n        clearTimeout(playId);\n    }\n\n    /** 스코어 가져오기 */\n    getScore = () => {\n        return score;\n    }\n\n    /** 스코어 초기화 */\n    setScore = () => {\n        mole.setState('score', 0);\n        score = 0;\n    }\n}   \n","import { Store } from \"redux\";\nimport { initialDataState, initialViewState, StoreStateType, AlertOptionType, ModalOptionType } from './../type/Type';\nimport { movePage, showAlert, hideAlert, showModal, hideModal } from \"../store/View\";\nimport { setState } from \"../store/Data\";\nimport List from \"./List\";\nimport Utils from \"./Utils\";\nimport Module from \"./Module\";\n\ntype StateType = keyof typeof initialDataState | keyof typeof initialViewState;\n\nexport class Mole {\n    private _store!: Store;\n\n    /**\n     * Store 초기화.\n     * @param inStore Store\n     */\n    public init(inStore: Store) {\n        this._store = inStore;\n    }\n\n    public get store() {\n        return this._store;\n    }\n\n    public set store(inStore: Store) {\n        this.store = inStore;\n    }\n\n    public get state(): StoreStateType {\n        return this.store.getState()\n    }\n    \n    /** list 확장 */\n    public get list() {\n        return new List();\n    }\n\n    /** Utils 확장 */\n    public get utils() {\n        return new Utils();\n    }\n    \n    /** Module 확장 */\n    public get module() {\n        return new Module();\n    }\n    \n    /**\n     * 얼럿 모달 오픈 \n     * @param message 메시지\n     * @param option 옵션\n     * \n     * @see\n     * message === 'hide' 는 모달 닫기\n     */\n    public alert(message: string, option?: AlertOptionType) {\n        (message === 'hide') ? this._store.dispatch(hideAlert()) : this._store.dispatch(showAlert({ message, alertOption: option }))\n        \n        option && console.log(message + '의 옵션 값: ', option);\n    }\n\n    /**\n     * 모달 열기\n     * @param name 모달명  \n     * @param option 모달 옵션\n     */\n    public showModal(name: string, option?: ModalOptionType) {\n        this._store.dispatch(showModal({\n            modalName: name,\n            modalOption: option\n        }))\n\n        option && console.log(name + '의 옵션 값: ', option);\n    }\n\n    /** 모달 닫기 */\n    public hideModal() {\n        this._store.dispatch(hideModal())\n    }\n\n    /**\n     * 스토어에 있는 상태 값 가져오기.\n     * @param key DataStateType | viewStateType 키\n     * @param type data | view\n     * @returns 키의 값\n     */\n    public getState(key: StateType, type: string = 'data') {\n        return this.store.getState()[type][key];\n    }\n\n    /**\n     * 스토어에 있는 Data 상태 값 변경.\n     * @param key StateType 데이터에 등록되어있는 타입\n     * @param value 바꿀 값\n     */\n    public setState(key: StateType, value: any): void {\n        this.store.dispatch(setState(\n            { [key]: value }\n        ));\n    }\n\n    /**\n     * 페이지 이동하기.\n     * @param path 이동할 페이지\n     */\n    public movePage(path: string) {\n        this.store.dispatch(movePage({\n            pageName: path\n        }))\n    }\n}\n\n// 개발자도구 디버깅 안걸고, 값 확인할 때를 위해 추가\nconst mole = (window as any).devmole = new Mole();\nexport default mole;","\nexport default class Utils {\n    /**\n     * 일시 포맷팅\n     * @param date 포맷팅할 Date\n     * @returns yyyy/mm/dd-hh:mi:ss\n     */\n    sysdate(date: Date): string {\n        const yyyy = date.getFullYear();\n        const mm = ('0' + (date.getMonth() + 1)).slice(-2);\n        const dd = ('0' + date.getDate()).slice(-2);\n        const hh = ('0' + date.getHours()).slice(-2); \n        const mi = ('0' + date.getMinutes()).slice(-2);\n        const ss = ('0' + date.getSeconds()).slice(-2); \n\n        return yyyy + '/' + mm + '/' + dd + ' ' + hh + ':' + mi + ':' + ss;\n    }\n\n    /**\n     * 테이블 행 or 열 리스트로 생성\n     * @param num 행 or 열의 값\n     * @returns 개수에 따른 height값\n     */\n    createArray(num: number): number[] {\n        return Array(num).fill(0).map((arr, i) => {\n            return i\n        })\n    }\n\n    /**\n     * active 클래스 추가\n     * @param el 추가할 El\n     */\n    addClassActive(el: Element | null) {\n        el?.classList.add('active');\n    }\n\n    /**\n     * active 클래스 제거\n     * @param el 삭제할 El\n     */\n    removeClassActive(el: Element | null) {\n        el?.classList.remove('active');\n    }\n\n    /**\n     * 랜덤 값 가져오기\n     * @param max 랜덤 값의 최대값 범위\n     * @returns {string} 1~max 값 \n     */\n    randomNum(max: number) {\n        return Math.floor((Math.random() * (max))).toString();\n    }\n\n    /**\n     * 스코어 내림차순 및 개수 뽑아오기\n     * @param arr 순위 리스트\n     * @param num 뽑아올 개수\n     */\n    sortArray(arr: any, num: number) {\n        return arr.slice(0, num).sort((a: {score: number, sysdate: string}, b: {score: number, sysdate: string}) => b.score - a.score);\n    }\n}","import { useState, useEffect } from \"react\";\nimport mole from \"../core/Mole\";\n\nconst ModalCountDown = () => {\n    const [counter, setCounter] = useState(3);\n\n    useEffect(() => {\n        const timer = setInterval(() => setCounter(counter - 1), 1000);\n\n        if (counter === -1) {\n            mole.setState('timer', 'start');\n            mole.hideModal();\n            clearInterval(timer);\n        }\n\n        return () => {\n            clearInterval(timer);\n        }\n    }, [counter]);\n\n    return (\n        <img className=\"image-pull\" \n            alt={`count-down-${counter}`} \n            style={{width: '50%'}}\n            src={`/images/count-down-${counter}.png`}/>        \n    );\n}   \n\nexport default ModalCountDown;","import mole from \"../core/Mole\";\n\nconst ModalReadyTest = () => {\n    const testData = [5, 10, 15, 30, 45, 60, 100];\n\n    const tableClickHandler = (time: number) => {\n        mole.setState('gameTime', time);\n        mole.hideModal();\n    }\n\n    return (\n        <>\n        <p>테스트 데이터를 선택해 주세요.</p>\n        <table className=\"table clearfix\" style={{marginBottom: '10%'}}>\n            <tbody>\n                <tr>\n                    <th>시간</th>\n                </tr>\n                {testData.map((time: number) => {\n                    return (\n                        <tr key={time}\n                            onClick={() => (tableClickHandler(time))}\n                        >\n                            <td>{time}초</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </>\n    )\n}\n\nexport default ModalReadyTest;","import mole from \"../core/Mole\";\nimport { rankDataType } from \"../type/Type\"\n\nconst ModalRankTest = () => {\n    const testData = [\n        {score: 52, sysdate:'2023/02/12 20:13:20'},\n        {score: 24, sysdate:'2023/05/11 15:13:20'},\n        {score: 11, sysdate:'2023/02/17 21:13:20'},\n        {score: 96, sysdate:'2023/02/28 05:13:20'},\n        {score: 112, sysdate:'2023/02/24 16:13:20'}\n    ]\n    const sortRank = mole.utils.sortArray(testData, 10);\n\n    const tableClickHandler = (item: rankDataType) => {\n        mole.setState('rankList', [\n            ...mole.getState('rankList'),\n            { score: item.score, sysdate: item.sysdate }\n        ])\n    }\n\n    return (\n        <>\n        <p>데이터를 선택하시면 테스트 데이터가 반영됩니다.</p>\n        <table className=\"table clearfix\" style={{marginBottom: '10%'}}>\n            <tbody>\n                <tr>\n                    <th>점수</th>\n                    <th>일시</th>\n                </tr>\n                {sortRank.map((item: rankDataType) => {\n                    return (\n                        <tr key={item.score + '-' + item.sysdate}\n                            onClick={() => (tableClickHandler(item))}\n                        >\n                            <td>{`${item.score}점`}</td>\n                            <td>{item.sysdate}</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </>\n    )\n}\n\nexport default ModalRankTest;","import mole from \"../core/Mole\";\nimport { screenDataType } from \"../type/Type\";\n\nconst ModalReadyTest = () => {\n    const testData = [\n        {row: 2, column:2, count: 1},\n        {row: 3, column:3, count: 3},\n        {row: 4, column:3, count: 4},\n        {row: 5, column:5, count: 8},\n        {row: 6, column:6, count: 10}\n    ]\n\n    const tableClickHandler = (item: screenDataType) => {\n        mole.setState('screenData', {\n            row: item.row,\n            column: item.column,\n            count: item.count\n        })\n        mole.hideModal();\n    }\n\n    return (\n        <>\n        <p>테스트 데이터를 선택해 주세요.</p>\n        <table className=\"table clearfix\" style={{marginBottom: '10%'}}>\n            <tbody>\n                <tr>\n                    {mole.list.screenDataList.map((item: {\n                        value: string, \n                        label: string\n                    }) => {\n                        return <th key={item.value}>{item.label}</th>\n                    })}\n                </tr>\n                {testData.map((item: screenDataType) => {\n                    return (\n                        <tr key={item.row + '-' + item.column + '-' + item.count}\n                            onClick={() => (tableClickHandler(item))}\n                        >\n                            <td>{item.row}</td>\n                            <td>{item.column}</td>\n                            <td>{item.count}</td>\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n        </>\n    )\n}\n\nexport default ModalReadyTest","import mole from \"../core/Mole\";\n\nconst ModalResult = () => {\n    // 점수 분리\n    const scoreSplit = () => {\n        const list = [];\n        const scoreStr = mole.getState('score').toString();\n\n        for(let i=0; i<scoreStr.length; i++) {\n            list.push(scoreStr.charAt(i));\n        }\n\n        return list;\n    }\n\n    return (\n        <div className=\"modal-score-result\">\n            <h1>\n                <span>S</span>\n                <span>C</span>\n                <span>O</span>\n                <span>R</span>\n                <span>E</span><br/>\n                {scoreSplit().map((item, idx) => {\n                    return <span key={item + '-' + idx}>{item}</span>\n                })}\n                <span>점</span>\n            </h1>\n        </div>\n    )\n}\n\nexport default ModalResult;","import { createAction } from '@reduxjs/toolkit';\nimport { initialDataState } from '../type/Type';\n\n// types\nconst GET_STATE = 'data/GET_STATE';\nconst SET_STATE = 'data/SET_STATE';\n\n// actions\nexport const getState = createAction<{\n    state: any;\n}>(GET_STATE);\nexport const setState = createAction<{\n    [key: string]: any\n}>(SET_STATE);\n\n// reducer\nconst dataReducer = (\n    state = initialDataState,\n    action: {\n        type: string;\n        payload?: any;\n    }\n) => {\n    switch (action.type) {\n        case GET_STATE:\n            return {\n                ...state,\n                ...action.payload\n            }\n        case SET_STATE:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport default dataReducer;","import { initialViewState, AlertOptionType, initAlertOption, ModalOptionType, initModalOption } from './../type/Type';\nimport { createAction } from \"@reduxjs/toolkit\";\n\n// types\nexport const MOVE_PAGE = \"view/MOVE_PAGE\";\nexport const SET_COVER = \"view/SET_COVER\";\nexport const SHOW_ALERT = \"view/SHOW_ALERT\";\nexport const HIDE_ALERT = \"view/HIDE_ALERT\";\nexport const SHOW_MODAL = \"view/SHOW_MODAL\";\nexport const HIDE_MODAL = \"view/HIDE_MODAL\";\n\n// actions\nexport const movePage = createAction<{\n    pageName: string;\n}>(MOVE_PAGE);\nexport const showAlert = createAction<{\n    message: string;\n    alertOption?: AlertOptionType;\n}>(SHOW_ALERT);\nexport const hideAlert = createAction(HIDE_ALERT);\nexport const showModal = createAction<{\n    modalName: string;\n    modalOption?: ModalOptionType;\n}>(SHOW_MODAL);\nexport const hideModal = createAction(HIDE_MODAL);\n\n// reducer\nconst viewReducer = (\n    state = initialViewState, \n    action: {type: string, payload?: any}\n) => {\n    switch (action.type) {\n        case MOVE_PAGE:\n            return {\n                ...state,\n                pageName: action.payload.pageName\n            }\n        case SHOW_ALERT:\n            const alertParam: AlertOptionType = action.payload.alertOption;\n            const alertOption: AlertOptionType = {\n                title: (alertParam && alertParam.title) || '',\n                confirm: (alertParam && alertParam.confirm) || '확인',\n                cancel: (alertParam && alertParam.cancel) || '',\n                param: (alertParam && alertParam.param) || undefined,\n                closeHandler: (alertParam && alertParam.closeHandler) || (() => {}),\n            };\n            return {\n                ...state,\n                alertMessage: action.payload.message,\n                alertOption: alertOption,\n                alertShowCheck: true\n            };\n        case HIDE_ALERT:\n            return {\n                ...state,\n                alertMessage: '',\n                alertOption: initAlertOption,\n                alertShowCheck: false\n            };\n        case SHOW_MODAL:\n            const popupParam: ModalOptionType = action.payload.modalOption;\n            const modalOption: ModalOptionType = {\n                confirm: (popupParam && popupParam.confirm) || '',\n                param: (popupParam && popupParam.param) || undefined,\n                callbackFunc: (popupParam && popupParam.callbackFunc) || (() => {}),\n            };\n            return {\n                ...state,\n                modalName: action.payload.modalName,\n                modalOption: modalOption,\n                isShowModal: true\n            }\n        case HIDE_MODAL:\n            return {\n                ...state,\n                modalName: '',\n                modalOption: initModalOption,\n                isShowModal: false\n            }\n        default:\n            return state;\n    }\n}\n\nexport default viewReducer;","// Store Type\nexport type StoreStateType = {\n    data: StoreStateDataType;\n    view: StoreStateViewType;\n}\n\n// Data Type\nexport type StoreStateDataType = {\n    screenData: screenDataType; // 두더지 굴 정보\n    score: number;              // 점수\n    totalCount: number;         // 출현한 총 두더지 개수\n    rankList: {score: number, sysdate: string}[],\n    showResult: boolean;        // 결과창 확인 여부\n    isStart: boolean;           // 게임 시작 여부\n    gameTime: number;           // 게임 시간\n    timer: 'start'              // 타이머\n        | 'pause' \n        | 'stop' \n        | 'resume' \n        | 'end' \n        | 'none' \n}\n\n// View Type\nexport type StoreStateViewType = {\n    // 현재 열려있는 화면\n    pageName: string;\n    // 얼럿 \n    alertMessage?: string;\n    alertOption?: AlertOptionType;\n    alertShowCheck: boolean;\n    // 모달\n    modalName: string;\n    isShowModal: boolean;\n    modalOption: ModalOptionType;\n}\n\n// Option Type\nexport type AlertOptionType = {\n    title?: string;\n    confirm?: string;\n    cancel?: string;\n    param?: any;\n    closeHandler?: Function;\n};\nexport type ModalOptionType = {\n    confirm?: string;\n    param?: any;\n    callbackFunc?: Function;\n}\n\n// Init\nexport const initAlertOption: AlertOptionType = {\n    title: '',\n    confirm: '확인',\n    cancel: '',\n    param: {},\n    closeHandler: () => {}\n};\nexport const initModalOption: ModalOptionType = {\n    confirm: '확인',\n    param: {},\n    callbackFunc: () => {},\n}\nexport const initialDataState: StoreStateDataType = {\n    screenData: {\n        row: 4,\n        column: 4,\n        count: 4\n    },\n    score: 0,\n    totalCount: 0,\n    timer: 'none',\n    rankList: [],\n    showResult: false,\n    isStart: false,\n    gameTime: 60\n}\nexport const initialViewState: StoreStateViewType = {\n    pageName: '',\n    alertMessage: '',\n    alertOption: initAlertOption,\n    alertShowCheck: false,\n    modalName: '',\n    isShowModal: false,\n    modalOption: initModalOption\n}\n\n// normal Type\nexport interface listInfoType {\n    label: string, \n    nextCode: string\n}\nexport interface screenDataType {\n    row: number;    // 행\n    column: number; // 열\n    count: number;  // 출현할 두더지 개수\n}\nexport type listNumberType = {\n    value: number, \n    label: number\n}[]\nexport type listStringType = {\n    value: string, \n    label: string\n}[]\nexport type rankDataType = {\n    score: number,\n    sysdate: string\n}\nexport type SelectPropsType = {\n    type: 'row' | 'column' | 'count';\n    list: listNumberType\n}"],"names":[],"sourceRoot":""}