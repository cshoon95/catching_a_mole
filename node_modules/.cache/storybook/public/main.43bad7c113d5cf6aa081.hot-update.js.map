{"version":3,"file":"main.43bad7c113d5cf6aa081.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAaA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AApDA;AAqDA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://kakao/./src/stories/core/Modal.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport ModalCountDown from \\\"../../modal/ModalCountDown\\\";\\nimport ModalResult from \\\"../../modal/ModalResult\\\";\\nimport ModalReadyTest from \\\"../../modal/ModalReadyTest\\\";\\nimport ModalGameTest from \\\"../../modal/ModalGameTest\\\";\\nimport ModalRankTest from \\\"../../modal/ModalRankTest\\\";\\nimport \\\"./../Common.css\\\";\\nimport \\\"./../Page.css\\\";\\n\\ntype ModalType = {\\n    /** 메시지 */\\n    modalName: string;\\n    /** 버튼 이벤트 핸들러 */\\n    callbackFunc?: Function;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Modal = (manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const loadPopup = () => { \\n            switch (props.modalName) {\\n                case 'ModalCountDown':  return <ModalCountDown/>;\\n                case 'ModalResult':     return <ModalResult/>;\\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\\n                case 'ModalGameTest':   return <ModalGameTest/>;\\n                case 'ModalRankTest':   return <ModalRankTest/>;\\n                default: return;\\n            }\\n        }\\n\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {loadPopup()}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                modalName={manager.modalName} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Modal,\\n    title: 'Core/Modal',\\n    decorators: [withKnobs]   \\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Modal\":{\"startLoc\":{\"col\":21,\"line\":22},\"endLoc\":{\"col\":1,\"line\":74},\"startBody\":{\"col\":21,\"line\":22},\"endBody\":{\"col\":1,\"line\":74}}};\n    \nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs'\nimport ModalCountDown from \"../../modal/ModalCountDown\";\nimport ModalResult from \"../../modal/ModalResult\";\nimport ModalReadyTest from \"../../modal/ModalReadyTest\";\nimport ModalGameTest from \"../../modal/ModalGameTest\";\nimport ModalRankTest from \"../../modal/ModalRankTest\";\nimport \"./../Common.css\";\nimport \"./../Page.css\";\n\ntype ModalType = {\n    /** 메시지 */\n    modalName: string;\n    /** 버튼 이벤트 핸들러 */\n    callbackFunc?: Function;\n    /** 확인 버튼 명 */\n    confirm?: string;\n    /** ref */\n    ref?: any\n}\n\nexport const Modal = (manager: ModalType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const ModalManager = (props: ModalType) => {\n        const loadPopup = () => { \n            switch (props.modalName) {\n                case 'ModalCountDown':  return <ModalCountDown/>;\n                case 'ModalResult':     return <ModalResult/>;\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\n                case 'ModalGameTest':   return <ModalGameTest/>;\n                case 'ModalRankTest':   return <ModalRankTest/>;\n                default: return;\n            }\n        }\n\n        const btnClickHandler = () => {\n            props.callbackFunc && props.callbackFunc();\n            setIsShow(false);\n        }\n\n        return (\n            <>\n            { isShow && \n            <div className=\"modal\">\n                <div className={\"modal-body\"}>\n                    {loadPopup()}\n                    {props?.confirm && \n                        <button className=\"button\" \n                                onClick={btnClickHandler}\n                                ref={props.ref}\n                        >{props?.confirm}</button>\n                    }\n                </div>                \n            </div>\n            }\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <button className=\"btn-reset\" onClick={() => (setIsShow(true))}>\n                Modal\n            </button>\n            <ModalManager \n                modalName={manager.modalName} \n                confirm={manager.confirm}\n                ref={manager.ref}\n                callbackFunc={manager.callbackFunc}/>\n        </div>\n    );\n    \n};\nexport default {\n    component: Modal,\n    title: 'Core/Modal',\n    decorators: [withKnobs]   \n}\n\n\nModal.parameters = { storySource: { source: \"(manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const loadPopup = () => { \\n            switch (props.modalName) {\\n                case 'ModalCountDown':  return <ModalCountDown/>;\\n                case 'ModalResult':     return <ModalResult/>;\\n                case 'ModalReadyTest':  return <ModalReadyTest/>;\\n                case 'ModalGameTest':   return <ModalGameTest/>;\\n                case 'ModalRankTest':   return <ModalRankTest/>;\\n                default: return;\\n            }\\n        }\\n\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {loadPopup()}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                modalName={manager.modalName} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\" }, ...Modal.parameters };"],"names":[],"sourceRoot":""}