{"version":3,"file":"main.87b725486073328866e0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAeA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AArCA;AAsCA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://kakao/./src/stories/core/Alert.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport styled, { keyframes, css} from \\\"styled-components\\\";\\n\\ntype AlertType = {\\n    /** 메시지 */\\n    message: string;\\n    /** 확인 이벤트 핸들러 */\\n    closeHandler?: Function;\\n    /** 취소 버튼 명 */\\n    cancel?: string;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Alert = (manager: AlertType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const AlertManager = (props: AlertType) => {\\n        const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\\n            const id = e.currentTarget.id;\\n            props?.closeHandler && props?.closeHandler(id);\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            <Background visible={isShow} />\\n                <ModalSection visible={isShow}>\\n                    <Title>\\n                        <CloseButton onClick={(e: any) => onClick(e)}>X</CloseButton>\\n                    </Title>\\n                    <Content>{props.message}</Content>\\n                    <div style={{width: '100%'}}>\\n                        {props?.cancel && <Button ref={props.ref} id=\\\"cancel\\\" onClick={(e: any) => onClick(e)}>{props?.cancel}</Button>}\\n                        {props?.confirm && <Button ref={props.ref} id=\\\"confirm\\\" onClick={(e: any) => onClick(e)}>{props?.confirm}</Button>}\\n                    </div>\\n            </ModalSection>\\n            </>\\n        )\\n    }\\n    \\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Alert\\n            </button>\\n            <AlertManager message={manager.message} closeHandler={() => {}}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Alert,\\n    title: 'Core/Alert',\\n    decorators: [withKnobs]\\n    \\n}\\n\\n// animations\\nconst fadeIn = keyframes`\\n    0% { opacity: 0;}\\n    100% { opacity: 1; }\\n`;\\n\\nconst fadeOut = keyframes`\\n    0% { opacity: 1; }\\n    100% { opacity: 0; }\\n`;\\n\\n// components\\nconst modalSettings = (visible: boolean) => css`\\n    visibility: ${visible ? 'visible' : 'hidden'};\\n    z-index: 15;\\n    animation: ${visible ? fadeIn : fadeOut} 0.15s ease-out;\\n    transition: visibility 0.15s ease-out;\\n`;\\n\\nconst Background = styled.div<{ visible: boolean }>`\\n    top: 0;\\n    right: 0;\\n    bottom: 0;\\n    left: 0;\\n    position: fixed;\\n    background-color: rgba(0, 0, 0, 0.6);\\n    ${(props) => modalSettings(props.visible)}\\n`;\\n\\nconst ModalSection = styled.div<{ visible: boolean }>`\\n    width: 25%;\\n    position: absolute;\\n    top: 40%;\\n    left: 50%;\\n    transform: translate(-50%, -50%);\\n    background-color: rgba(255, 255, 255, 1);\\n    padding: 16px;\\n    ${(props) => modalSettings(props.visible)}\\n`;\\n\\nconst Title = styled.div`\\n    display: flex;\\n    justify-content: flex-end;\\n    padding: 0 16px;\\n`;\\n\\nconst Content = styled.div`\\n    padding: 16px 0 15px 15px;\\n\\n`;\\nconst Button = styled.div`\\n    padding: 16px;\\n    \\n    float: right;\\n    flex-direction: row-reverse;\\n`;\\n\\nconst CloseButton = styled.button`\\n    border: none;\\n    background: none;\\n    cursor: pointer;\\n    display: contents;\\n`;\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Alert\":{\"startLoc\":{\"col\":21,\"line\":18},\"endLoc\":{\"col\":1,\"line\":55},\"startBody\":{\"col\":21,\"line\":18},\"endBody\":{\"col\":1,\"line\":55}}};\n    \nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs'\nimport styled, { keyframes, css} from \"styled-components\";\n\ntype AlertType = {\n    /** 메시지 */\n    message: string;\n    /** 확인 이벤트 핸들러 */\n    closeHandler?: Function;\n    /** 취소 버튼 명 */\n    cancel?: string;\n    /** 확인 버튼 명 */\n    confirm?: string;\n    /** ref */\n    ref?: any\n}\n\nexport const Alert = (manager: AlertType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const AlertManager = (props: AlertType) => {\n        const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n            const id = e.currentTarget.id;\n            props?.closeHandler && props?.closeHandler(id);\n            setIsShow(false);\n        }\n\n        return (\n            <>\n            <Background visible={isShow} />\n                <ModalSection visible={isShow}>\n                    <Title>\n                        <CloseButton onClick={(e: any) => onClick(e)}>X</CloseButton>\n                    </Title>\n                    <Content>{props.message}</Content>\n                    <div style={{width: '100%'}}>\n                        {props?.cancel && <Button ref={props.ref} id=\"cancel\" onClick={(e: any) => onClick(e)}>{props?.cancel}</Button>}\n                        {props?.confirm && <Button ref={props.ref} id=\"confirm\" onClick={(e: any) => onClick(e)}>{props?.confirm}</Button>}\n                    </div>\n            </ModalSection>\n            </>\n        )\n    }\n    \n\n    return (\n        <div>\n            <button className=\"btn-reset\" onClick={() => (setIsShow(true))}>\n                Alert\n            </button>\n            <AlertManager message={manager.message} closeHandler={() => {}}/>\n        </div>\n    );\n    \n};\nexport default {\n    component: Alert,\n    title: 'Core/Alert',\n    decorators: [withKnobs]\n    \n}\n\n// animations\nconst fadeIn = keyframes`\n    0% { opacity: 0;}\n    100% { opacity: 1; }\n`;\n\nconst fadeOut = keyframes`\n    0% { opacity: 1; }\n    100% { opacity: 0; }\n`;\n\n// components\nconst modalSettings = (visible: boolean) => css`\n    visibility: ${visible ? 'visible' : 'hidden'};\n    z-index: 15;\n    animation: ${visible ? fadeIn : fadeOut} 0.15s ease-out;\n    transition: visibility 0.15s ease-out;\n`;\n\nconst Background = styled.div<{ visible: boolean }>`\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    position: fixed;\n    background-color: rgba(0, 0, 0, 0.6);\n    ${(props) => modalSettings(props.visible)}\n`;\n\nconst ModalSection = styled.div<{ visible: boolean }>`\n    width: 25%;\n    position: absolute;\n    top: 40%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: rgba(255, 255, 255, 1);\n    padding: 16px;\n    ${(props) => modalSettings(props.visible)}\n`;\n\nconst Title = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    padding: 0 16px;\n`;\n\nconst Content = styled.div`\n    padding: 16px 0 15px 15px;\n\n`;\nconst Button = styled.div`\n    padding: 16px;\n    \n    float: right;\n    flex-direction: row-reverse;\n`;\n\nconst CloseButton = styled.button`\n    border: none;\n    background: none;\n    cursor: pointer;\n    display: contents;\n`;\n\n\n\nAlert.parameters = { storySource: { source: \"(manager: AlertType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const AlertManager = (props: AlertType) => {\\n        const onClick = (e: React.MouseEvent<HTMLButtonElement>) => {\\n            const id = e.currentTarget.id;\\n            props?.closeHandler && props?.closeHandler(id);\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            <Background visible={isShow} />\\n                <ModalSection visible={isShow}>\\n                    <Title>\\n                        <CloseButton onClick={(e: any) => onClick(e)}>X</CloseButton>\\n                    </Title>\\n                    <Content>{props.message}</Content>\\n                    <div style={{width: '100%'}}>\\n                        {props?.cancel && <Button ref={props.ref} id=\\\"cancel\\\" onClick={(e: any) => onClick(e)}>{props?.cancel}</Button>}\\n                        {props?.confirm && <Button ref={props.ref} id=\\\"confirm\\\" onClick={(e: any) => onClick(e)}>{props?.confirm}</Button>}\\n                    </div>\\n            </ModalSection>\\n            </>\\n        )\\n    }\\n    \\n\\n    return (\\n        <div>\\n            <button className=\\\"btn-reset\\\" onClick={() => (setIsShow(true))}>\\n                Alert\\n            </button>\\n            <AlertManager message={manager.message} closeHandler={() => {}}/>\\n        </div>\\n    );\\n    \\n}\" }, ...Alert.parameters };"],"names":[],"sourceRoot":""}