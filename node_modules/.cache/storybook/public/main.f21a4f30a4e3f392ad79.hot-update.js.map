{"version":3,"file":"main.f21a4f30a4e3f392ad79.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAaA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAzCA;AA0CA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["webpack://kakao/./src/stories/core/Modal.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport \\\"./../common.css\\\";\\n\\ntype ModalType = {\\n    /** 오픈할 팝업 El */\\n    children: React.ReactElement;\\n    /** 모달 닫히면 실행되는 이벤트 */\\n    closeHandler?: Function;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Modal = (manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.closeHandler && props.closeHandler();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                closeHandler={manager.closeHandler}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Modal,\\n    title: 'Core/Modal',\\n    decorators: [withKnobs]\\n}\\n\\nModal.args = {\\n    children: <p>children</p>,\\n    confirm: '확인',\\n    callbackFunc: () => {}\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Modal\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":57}}};\n    \nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs'\nimport \"./../common.css\";\n\ntype ModalType = {\n    /** 오픈할 팝업 El */\n    children: React.ReactElement;\n    /** 모달 닫히면 실행되는 이벤트 */\n    closeHandler?: Function;\n    /** 확인 버튼 명 */\n    confirm?: string;\n    /** ref */\n    ref?: any\n}\n\nexport const Modal = (manager: ModalType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const ModalManager = (props: ModalType) => {\n        const btnClickHandler = () => {\n            props.closeHandler && props.closeHandler();\n            setIsShow(false);\n        }\n\n        return (\n            <>\n            { isShow && \n            <div className=\"modal\">\n                <div className={\"modal-body\"}>\n                    {props.children}\n                    {props?.confirm && \n                        <button className=\"button\" \n                                onClick={btnClickHandler}\n                                ref={props.ref}\n                        >{props?.confirm}</button>\n                    }\n                </div>                \n            </div>\n            }\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <button className=\"btn\" onClick={() => (setIsShow(true))}>\n                Modal\n            </button>\n            <ModalManager \n                children={manager.children} \n                confirm={manager.confirm}\n                ref={manager.ref}\n                closeHandler={manager.closeHandler}/>\n        </div>\n    );\n    \n};\nexport default {\n    component: Modal,\n    title: 'Core/Modal',\n    decorators: [withKnobs]\n}\n\nModal.args = {\n    children: <p>children</p>,\n    confirm: '확인',\n    callbackFunc: () => {}\n}\n\n\nModal.parameters = { storySource: { source: \"(manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.closeHandler && props.closeHandler();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                closeHandler={manager.closeHandler}/>\\n        </div>\\n    );\\n    \\n}\" }, ...Modal.parameters };"],"names":[],"sourceRoot":""}