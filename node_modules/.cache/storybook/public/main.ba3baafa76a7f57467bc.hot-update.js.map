{"version":3,"file":"main.ba3baafa76a7f57467bc.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA","sources":["webpack://kakao/./src/stories/docs/Intro.stories.mdx"],"sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { assertIsFn, AddContext } from \"@storybook/addon-docs\";\n\nimport ConsoleImg from '../asset/console.png';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Meta = makeShortcode(\"Meta\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nfunction MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <Meta title=\"docs/Intro\" mdxType=\"Meta\" />\n    <style>{`\n    body {\n        overflow: scroll !important;\n    }\n`}</style>\n    <h1 {...{\n      \"id\": \"화면-관리-및-구조\"\n    }}>{`화면 관리 및 구조`}</h1>\n    <br />\n    <h2 {...{\n      \"id\": \"directory\"\n    }}>{`Directory`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`├── .storybook\n├── build  // 빌드  \n├── node_modules\n├── public // 템플릿 및 Static 폴더\n│    ├── images\n│    ├── index.html\n├── src\n│    ├── comp // 공통 컴포넌트\n│    ├── core // 공통 코어\n│        ├── List.ts // 리스트 관리\n│        ├── Module.ts // 공통 로직 관리\n│        ├── Mole.ts // mole로 접근되도록 메소드 랩핑 클래스\n│        ├── Utils.ts // 공통 유틸리티 메소드\n│    ├── css\n│        ├── Common.css // 공통 css\n│        ├── Page.css // 화면별 css\n│    ├── hooks // 커스텀 hooks\n│    ├── manager\n│        ├── Alert.tsx // 얼럿 관리\n│        ├── Modal.tsx // 모달 관리\n│    ├── page\n│        ├── Game.tsx // 게임 화면\n│        ├── NotFound.tsx // 404 화면\n│        ├── Rank.tsx // 순위 화면\n│        ├── Ready.tsx // 준비 화면\n│    ├── store\n│        ├── Data.ts // 데이터 관련\n│        ├── Store.ts // 데이터 + 뷰\n│        ├── View.ts // 화면 관련\n│    ├── stories\n│        ├── common.css\n│        ├── asset // Static 폴더\n│        ├── comp // 공통 컴포넌트\n│        ├── core // 공통 코어\n│        ├── docs // 마크업\n│    ├── type\n│        ├── Type.ts // 공통 타입\n│    ├── index.tsx\n│    ├── Main.tsx\n│    ├── reportWebVitals.js\n│    ├── setupTests.js\n├── .gitignore\n├── .npmrc\n├── package.json\n├── package-lock.json\n├── README.md\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"개발-환경\"\n    }}>{`개발 환경`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`- 코어: React, TypeScript\n- 상태 관리: Redux\n- 스타일링: Css, Styled Component\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"node-modules\"\n    }}>{`Node Modules`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`- react-redux(+Redux)   // 전체 데이터 및 상태 관리\n- react-router-dom      // 페이지 이동 제어\n- redux-logger          // 상태 변경 시 로그 확인\n- styled-components     // 컴포넌트 단위 스타일링\n- storybook(+addon)     // 스토리북\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"state\"\n    }}>{`State`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Redux 스토어 구조`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`mole 랩핑 클래스`}</li>\n          <li parentName=\"ul\">{`개발자도구 콘솔 -> devmole`}\n            <ul parentName=\"li\">\n              <li parentName=\"ul\">{`redux tools보다 console 확인, 변경 방식 용이`}</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ol>\n    <img src={ConsoleImg} />\n    <h2 {...{\n      \"id\": \"style\"\n    }}>{`Style`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`css`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`common.css: 공통 관리`}</li>\n          <li parentName=\"ul\">{`page.css: 공통을 제외한 페이지에서 따로 사용되는 css 관리`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ol\">{`styled-components `}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`스타일과 컴포넌트가 깊게 엮여 Alert에서만 사용`}</li>\n        </ul>\n      </li>\n    </ol>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n\nexport const __page = () => { throw new Error(\"Docs-only story\"); };\n\n__page.parameters = { docsOnly: true };\n\nconst componentMeta = { title: 'docs/Intro', includeStories: [\"__page\"],  };\n\nconst mdxStoryNameToKey = {};\n\ncomponentMeta.parameters = componentMeta.parameters || {};\ncomponentMeta.parameters.docs = {\n  ...(componentMeta.parameters.docs || {}),\n  page: () => <AddContext mdxStoryNameToKey={mdxStoryNameToKey} mdxComponentAnnotations={componentMeta}><MDXContent /></AddContext>,\n};\n\nexport default componentMeta;"],"names":[],"sourceRoot":""}