{"ast":null,"code":"import mole from \"./Mole\";\nexport default class List {\n  constructor() {\n    this.rowColumnList = [{\n      value: 2,\n      label: 2\n    }, {\n      value: 3,\n      label: 3\n    }, {\n      value: 4,\n      label: 4\n    }, {\n      value: 5,\n      label: 5\n    }, {\n      value: 6,\n      label: 6\n    }];\n    this.screenDataList = [{\n      value: 'row',\n      label: '행'\n    }, {\n      value: 'column',\n      label: '열'\n    }, {\n      value: 'count',\n      label: '두더지'\n    }];\n    this.timerBtnList = [{\n      value: 'start',\n      labels: ['일시정지', '그만하기']\n    }, {\n      value: 'pause',\n      labels: ['재개하기']\n    }, {\n      value: 'stop',\n      labels: ['시작하기']\n    }];\n  }\n  // 두더지 수 리스트 가져오기\n  moleCountList() {\n    const screenData = mole.getState('screenData');\n    const maxCount = screenData.row * screenData.column / 2;\n    const list = [];\n\n    // 행/열 선택 안한 케이스라면 종료\n    if (maxCount === 0) return [];\n\n    // 최소 1, 최대 (행 x 열) / 2\n    for (let i = 1; i < maxCount; i++) {\n      list.push({\n        value: i,\n        label: i\n      });\n    }\n    return list;\n  }\n}","map":{"version":3,"names":["mole","List","rowColumnList","value","label","screenDataList","timerBtnList","labels","moleCountList","screenData","getState","maxCount","row","column","list","i","push"],"sources":["/Users/soohoon/Desktop/kakao/20230207-jsh/src/core/List.ts"],"sourcesContent":["import mole from \"./Mole\";\n\ntype normalNumberType = {\n    value: number, \n    label: number\n}[]\n\ntype normalStringType = {\n    value: string, \n    label: string\n}[]\n\nexport default class List {\n    // 행, 열 드롭다운 리스트\n    rowColumnList: normalNumberType = [\n        {value: 2, label: 2},\n        {value: 3, label: 3},\n        {value: 4, label: 4},\n        {value: 5, label: 5},\n        {value: 6, label: 6},\n    ]\n\n    // 두더지 수 리스트 가져오기\n    moleCountList() {\n        const screenData = mole.getState('screenData');\n        const maxCount = (screenData.row * screenData.column) / 2;\n        const list: {value: number, label: number}[] = [];\n\n        // 행/열 선택 안한 케이스라면 종료\n        if (maxCount === 0) return [];\n\n        // 최소 1, 최대 (행 x 열) / 2\n        for (let i=1; i<maxCount; i++) {\n            list.push({value: i, label: i})\n        }\n\n        return list;\n    }\n\n    screenDataList: normalStringType = [\n        {value: 'row', label: '행'},\n        {value: 'column', label: '열'},\n        {value: 'count', label: '두더지'},\n    ]\n\n    // 타이머 모드에 따라 가져오는 버튼 리스트.\n    timerBtnList: {value: string, labels: string[]}[] = [\n        {value: 'start', labels: ['일시정지', '그만하기']},\n        {value: 'pause', labels: ['재개하기']},\n        {value: 'stop', labels: ['시작하기']},\n        \n    ]\n}"],"mappings":"AAAA,OAAOA,IAAI,MAAM,QAAQ;AAYzB,eAAe,MAAMC,IAAI,CAAC;EAAA;IAAA,KAEtBC,aAAa,GAAqB,CAC9B;MAACC,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAC,EACpB;MAACD,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAC,EACpB;MAACD,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAC,EACpB;MAACD,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAC,EACpB;MAACD,KAAK,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAC,CAAC,CACvB;IAAA,KAmBDC,cAAc,GAAqB,CAC/B;MAACF,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAG,CAAC,EAC1B;MAACD,KAAK,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAG,CAAC,EAC7B;MAACD,KAAK,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAK,CAAC,CACjC;IAAA,KAGDE,YAAY,GAAwC,CAChD;MAACH,KAAK,EAAE,OAAO;MAAEI,MAAM,EAAE,CAAC,MAAM,EAAE,MAAM;IAAC,CAAC,EAC1C;MAACJ,KAAK,EAAE,OAAO;MAAEI,MAAM,EAAE,CAAC,MAAM;IAAC,CAAC,EAClC;MAACJ,KAAK,EAAE,MAAM;MAAEI,MAAM,EAAE,CAAC,MAAM;IAAC,CAAC,CAEpC;EAAA;EA7BD;EACAC,aAAa,GAAG;IACZ,MAAMC,UAAU,GAAGT,IAAI,CAACU,QAAQ,CAAC,YAAY,CAAC;IAC9C,MAAMC,QAAQ,GAAIF,UAAU,CAACG,GAAG,GAAGH,UAAU,CAACI,MAAM,GAAI,CAAC;IACzD,MAAMC,IAAsC,GAAG,EAAE;;IAEjD;IACA,IAAIH,QAAQ,KAAK,CAAC,EAAE,OAAO,EAAE;;IAE7B;IACA,KAAK,IAAII,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;MAC3BD,IAAI,CAACE,IAAI,CAAC;QAACb,KAAK,EAAEY,CAAC;QAAEX,KAAK,EAAEW;MAAC,CAAC,CAAC;IACnC;IAEA,OAAOD,IAAI;EACf;AAeJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}