{"ast":null,"code":"var _jsxFileName = \"/Users/soohoon/Desktop/kakao/20230207-jsh/src/stories/comp/Progressbar.stories.tsx\",\n  _s2 = $RefreshSig$();\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import { withKnobs } from '@storybook/addon-knobs'\\nimport { useState, useEffect } from \\\"react\\\";\\n\\ntype ProgressbarType = {\\n    /** 설정할 값 */\\n    time: number;\\n}\\n\\nexport const ProgressBar = (manager: ProgressbarType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ProgressBarManager = (props: ProgressbarType) => {\\n        const [ timer, setTimer ] = useState(props.time);\\n    \\n        useEffect(() => {\\n            if (isShow) {\\n                const id = setInterval(() => {\\n                    setTimer(timer - 1);\\n                }, 1000);\\n\\n                return () => clearInterval(id);\\n            }\\n    \\n        }, [timer]);\\n    \\n        setInterval(() => {\\n            const id = setTimer(timer - 1);\\n        }, 1000);\\n    \\n        return (\\n            <div className='progress-wrap'>\\n                <progress className='progress-bar' value={timer} max={props.time}/>\\n                <span className='progress-timer'>{`${timer}초`}</span>\\n            </div>\\n        )\\n    }\\n\\n   \\n\\n    return (\\n        <>\\n        <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n            Alert\\n        </button>\\n        <ProgressBarManager />\\n        </>\\n    ) \\n}\\nexport default {\\n    component: ProgressBar,\\n    title: 'Comp/ProgressBar',\\n    decorators: [withKnobs]\\n    \\n}\\n\\nProgressBar.args = {\\n    time: 60\\n}\\n\";\n// @ts-ignore\nvar __LOCATIONS_MAP__ = {\n  \"ProgressBar\": {\n    \"startLoc\": {\n      \"col\": 27,\n      \"line\": 9\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 48\n    },\n    \"startBody\": {\n      \"col\": 27,\n      \"line\": 9\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 48\n    }\n  }\n};\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ProgressBar = manager => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [isShow, setIsShow] = useState(false);\n  const ProgressBarManager = props => {\n    _s();\n    const [timer, setTimer] = useState(props.time);\n    useEffect(() => {\n      if (isShow) {\n        const id = setInterval(() => {\n          setTimer(timer - 1);\n        }, 1000);\n        return () => clearInterval(id);\n      }\n    }, [timer]);\n    setInterval(() => {\n      const id = setTimer(timer - 1);\n    }, 1000);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n        className: \"progress-bar\",\n        value: timer,\n        max: props.time\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"progress-timer\",\n        children: `${timer}초`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  };\n  _s(ProgressBarManager, \"7/zOU+xx07y4RGgWilUv1/dT+5Y=\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: () => setIsShow(true),\n      children: \"Alert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ProgressBarManager, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s2(ProgressBar, \"Lw92Jm1dO1hdgb+if9nVuMI+J54=\");\n_c = ProgressBar;\nexport default {\n  component: ProgressBar,\n  title: 'Comp/ProgressBar',\n  decorators: [withKnobs]\n};\nProgressBar.args = {\n  time: 60\n};\nProgressBar.parameters = {\n  storySource: {\n    source: \"(manager: ProgressbarType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ProgressBarManager = (props: ProgressbarType) => {\\n        const [ timer, setTimer ] = useState(props.time);\\n    \\n        useEffect(() => {\\n            if (isShow) {\\n                const id = setInterval(() => {\\n                    setTimer(timer - 1);\\n                }, 1000);\\n\\n                return () => clearInterval(id);\\n            }\\n    \\n        }, [timer]);\\n    \\n        setInterval(() => {\\n            const id = setTimer(timer - 1);\\n        }, 1000);\\n    \\n        return (\\n            <div className='progress-wrap'>\\n                <progress className='progress-bar' value={timer} max={props.time}/>\\n                <span className='progress-timer'>{`${timer}초`}</span>\\n            </div>\\n        )\\n    }\\n\\n   \\n\\n    return (\\n        <>\\n        <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n            Alert\\n        </button>\\n        <ProgressBarManager />\\n        </>\\n    ) \\n}\"\n  },\n  ...ProgressBar.parameters\n};\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");\nexport const __namedExportsOrder = [\"ProgressBar\"];","map":{"version":3,"names":["__STORY__","__LOCATIONS_MAP__","withKnobs","useState","useEffect","ProgressBar","manager","isShow","setIsShow","ProgressBarManager","props","timer","setTimer","time","id","setInterval","clearInterval","component","title","decorators","args","parameters","storySource","source"],"sources":["/Users/soohoon/Desktop/kakao/20230207-jsh/src/stories/comp/Progressbar.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { withKnobs } from '@storybook/addon-knobs'\\nimport { useState, useEffect } from \\\"react\\\";\\n\\ntype ProgressbarType = {\\n    /** 설정할 값 */\\n    time: number;\\n}\\n\\nexport const ProgressBar = (manager: ProgressbarType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ProgressBarManager = (props: ProgressbarType) => {\\n        const [ timer, setTimer ] = useState(props.time);\\n    \\n        useEffect(() => {\\n            if (isShow) {\\n                const id = setInterval(() => {\\n                    setTimer(timer - 1);\\n                }, 1000);\\n\\n                return () => clearInterval(id);\\n            }\\n    \\n        }, [timer]);\\n    \\n        setInterval(() => {\\n            const id = setTimer(timer - 1);\\n        }, 1000);\\n    \\n        return (\\n            <div className='progress-wrap'>\\n                <progress className='progress-bar' value={timer} max={props.time}/>\\n                <span className='progress-timer'>{`${timer}초`}</span>\\n            </div>\\n        )\\n    }\\n\\n   \\n\\n    return (\\n        <>\\n        <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n            Alert\\n        </button>\\n        <ProgressBarManager />\\n        </>\\n    ) \\n}\\nexport default {\\n    component: ProgressBar,\\n    title: 'Comp/ProgressBar',\\n    decorators: [withKnobs]\\n    \\n}\\n\\nProgressBar.args = {\\n    time: 60\\n}\\n\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"ProgressBar\":{\"startLoc\":{\"col\":27,\"line\":9},\"endLoc\":{\"col\":1,\"line\":48},\"startBody\":{\"col\":27,\"line\":9},\"endBody\":{\"col\":1,\"line\":48}}};\n    \nimport { withKnobs } from '@storybook/addon-knobs'\nimport { useState, useEffect } from \"react\";\n\ntype ProgressbarType = {\n    /** 설정할 값 */\n    time: number;\n}\n\nexport const ProgressBar = (manager: ProgressbarType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const ProgressBarManager = (props: ProgressbarType) => {\n        const [ timer, setTimer ] = useState(props.time);\n    \n        useEffect(() => {\n            if (isShow) {\n                const id = setInterval(() => {\n                    setTimer(timer - 1);\n                }, 1000);\n\n                return () => clearInterval(id);\n            }\n    \n        }, [timer]);\n    \n        setInterval(() => {\n            const id = setTimer(timer - 1);\n        }, 1000);\n    \n        return (\n            <div className='progress-wrap'>\n                <progress className='progress-bar' value={timer} max={props.time}/>\n                <span className='progress-timer'>{`${timer}초`}</span>\n            </div>\n        )\n    }\n\n   \n\n    return (\n        <>\n        <button className=\"btn\" onClick={() => (setIsShow(true))}>\n            Alert\n        </button>\n        <ProgressBarManager />\n        </>\n    ) \n};export default {\n    component: ProgressBar,\n    title: 'Comp/ProgressBar',\n    decorators: [withKnobs]\n    \n}\n\nProgressBar.args = {\n    time: 60\n}\n\n\n\nProgressBar.parameters = { storySource: { source: \"(manager: ProgressbarType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ProgressBarManager = (props: ProgressbarType) => {\\n        const [ timer, setTimer ] = useState(props.time);\\n    \\n        useEffect(() => {\\n            if (isShow) {\\n                const id = setInterval(() => {\\n                    setTimer(timer - 1);\\n                }, 1000);\\n\\n                return () => clearInterval(id);\\n            }\\n    \\n        }, [timer]);\\n    \\n        setInterval(() => {\\n            const id = setTimer(timer - 1);\\n        }, 1000);\\n    \\n        return (\\n            <div className='progress-wrap'>\\n                <progress className='progress-bar' value={timer} max={props.time}/>\\n                <span className='progress-timer'>{`${timer}초`}</span>\\n            </div>\\n        )\\n    }\\n\\n   \\n\\n    return (\\n        <>\\n        <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n            Alert\\n        </button>\\n        <ProgressBarManager />\\n        </>\\n    ) \\n}\" }, ...ProgressBar.parameters };"],"mappings":";;AACI;AACA;AACA;AACA,IAAIA,SAAS,GAAG,q3CAAq3C;AACr4C;AACA,IAAIC,iBAAiB,GAAG;EAAC,aAAa,EAAC;IAAC,UAAU,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAC,CAAC;IAAC,QAAQ,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,WAAW,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAC,CAAC;IAAC,SAAS,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE;EAAC;AAAC,CAAC;AAEvK,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC;AAAA;AAO5C,OAAO,MAAMC,WAAW,GAAIC,OAAwB,IAAK;EAAA;EAAA;EACrD,MAAM,CAAEC,MAAM,EAAEC,SAAS,CAAE,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMM,kBAAkB,GAAIC,KAAsB,IAAK;IAAA;IACnD,MAAM,CAAEC,KAAK,EAAEC,QAAQ,CAAE,GAAGT,QAAQ,CAACO,KAAK,CAACG,IAAI,CAAC;IAEhDT,SAAS,CAAC,MAAM;MACZ,IAAIG,MAAM,EAAE;QACR,MAAMO,EAAE,GAAGC,WAAW,CAAC,MAAM;UACzBH,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;QACvB,CAAC,EAAE,IAAI,CAAC;QAER,OAAO,MAAMK,aAAa,CAACF,EAAE,CAAC;MAClC;IAEJ,CAAC,EAAE,CAACH,KAAK,CAAC,CAAC;IAEXI,WAAW,CAAC,MAAM;MACd,MAAMD,EAAE,GAAGF,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IAClC,CAAC,EAAE,IAAI,CAAC;IAER,oBACI;MAAK,SAAS,EAAC,eAAe;MAAA,wBAC1B;QAAU,SAAS,EAAC,cAAc;QAAC,KAAK,EAAEA,KAAM;QAAC,GAAG,EAAED,KAAK,CAACG;MAAK;QAAA;QAAA;QAAA;MAAA,QAAE,eACnE;QAAM,SAAS,EAAC,gBAAgB;QAAA,UAAG,GAAEF,KAAM;MAAE;QAAA;QAAA;QAAA;MAAA,QAAQ;IAAA;MAAA;MAAA;MAAA;IAAA,QACnD;EAEd,CAAC;EAAA,GAxBKF,kBAAkB;EA4BxB,oBACI;IAAA,wBACA;MAAQ,SAAS,EAAC,KAAK;MAAC,OAAO,EAAE,MAAOD,SAAS,CAAC,IAAI,CAAG;MAAA,UAAC;IAE1D;MAAA;MAAA;MAAA;IAAA,QAAS,eACT,QAAC,kBAAkB;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBACnB;AAEX,CAAC;AAAC,IAvCWH,WAAW;AAAA,KAAXA,WAAW;AAuCtB,eAAe;EACbY,SAAS,EAAEZ,WAAW;EACtBa,KAAK,EAAE,kBAAkB;EACzBC,UAAU,EAAE,CAACjB,SAAS;AAE1B,CAAC;AAEDG,WAAW,CAACe,IAAI,GAAG;EACfP,IAAI,EAAE;AACV,CAAC;AAIDR,WAAW,CAACgB,UAAU,GAAG;EAAEC,WAAW,EAAE;IAAEC,MAAM,EAAE;EAAihC,CAAC;EAAE,GAAGlB,WAAW,CAACgB;AAAW,CAAC;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}