{"ast":null,"code":"var _jsxFileName = \"/Users/soohoon/Desktop/kakao/20230207-jsh/src/stories/core/Modal.stories.tsx\",\n  _s = $RefreshSig$();\n/* eslint-disable */\n// @ts-nocheck\n// @ts-ignore\nvar __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport \\\"./../common.css\\\";\\n\\ntype ModalType = {\\n    /** 오픈할 팝업 El */\\n    children: React.ReactElement;\\n    /** 모달 닫히면 실행되는 이벤트 */\\n    closeHandler?: Function;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Modal = (manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Modal,\\n    title: 'Core/Modal',\\n    decorators: [withKnobs]\\n}\\n\\nModal.args = {\\n    children: <p>children</p>,\\n    confirm: '확인',\\n    callbackFunc: () => {}\\n}\";\n// @ts-ignore\nvar __LOCATIONS_MAP__ = {\n  \"Modal\": {\n    \"startLoc\": {\n      \"col\": 21,\n      \"line\": 16\n    },\n    \"endLoc\": {\n      \"col\": 1,\n      \"line\": 57\n    },\n    \"startBody\": {\n      \"col\": 21,\n      \"line\": 16\n    },\n    \"endBody\": {\n      \"col\": 1,\n      \"line\": 57\n    }\n  }\n};\nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport \"./../common.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Modal = manager => {\n  _s();\n  const [isShow, setIsShow] = useState(false);\n  const ModalManager = props => {\n    const btnClickHandler = () => {\n      props.callbackFunc && props.callbackFunc();\n      setIsShow(false);\n    };\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: isShow && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: [props.children, (props === null || props === void 0 ? void 0 : props.confirm) && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: btnClickHandler,\n            ref: props.ref,\n            children: props === null || props === void 0 ? void 0 : props.confirm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn\",\n      onClick: () => setIsShow(true),\n      children: \"Modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ModalManager, {\n      children: manager.children,\n      confirm: manager.confirm,\n      ref: manager.ref,\n      callbackFunc: manager.callbackFunc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(Modal, \"Lw92Jm1dO1hdgb+if9nVuMI+J54=\");\n_c = Modal;\nexport default {\n  component: Modal,\n  title: 'Core/Modal',\n  decorators: [withKnobs]\n};\nModal.args = {\n  children: /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"children\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 15\n  }, this),\n  confirm: '확인',\n  callbackFunc: () => {}\n};\nModal.parameters = {\n  storySource: {\n    source: \"(manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\"\n  },\n  ...Modal.parameters\n};\nvar _c;\n$RefreshReg$(_c, \"Modal\");\nexport const __namedExportsOrder = [\"Modal\"];","map":{"version":3,"names":["__STORY__","__LOCATIONS_MAP__","useState","withKnobs","Modal","manager","isShow","setIsShow","ModalManager","props","btnClickHandler","callbackFunc","children","confirm","ref","component","title","decorators","args","parameters","storySource","source"],"sources":["/Users/soohoon/Desktop/kakao/20230207-jsh/src/stories/core/Modal.stories.tsx"],"sourcesContent":["\n    /* eslint-disable */\n    // @ts-nocheck\n    // @ts-ignore\n    var __STORY__ = \"import { useState } from 'react';\\nimport { withKnobs } from '@storybook/addon-knobs'\\nimport \\\"./../common.css\\\";\\n\\ntype ModalType = {\\n    /** 오픈할 팝업 El */\\n    children: React.ReactElement;\\n    /** 모달 닫히면 실행되는 이벤트 */\\n    closeHandler?: Function;\\n    /** 확인 버튼 명 */\\n    confirm?: string;\\n    /** ref */\\n    ref?: any\\n}\\n\\nexport const Modal = (manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\\n\\nexport default {\\n    component: Modal,\\n    title: 'Core/Modal',\\n    decorators: [withKnobs]\\n}\\n\\nModal.args = {\\n    children: <p>children</p>,\\n    confirm: '확인',\\n    callbackFunc: () => {}\\n}\";\n    // @ts-ignore\n    var __LOCATIONS_MAP__ = {\"Modal\":{\"startLoc\":{\"col\":21,\"line\":16},\"endLoc\":{\"col\":1,\"line\":57},\"startBody\":{\"col\":21,\"line\":16},\"endBody\":{\"col\":1,\"line\":57}}};\n    \nimport { useState } from 'react';\nimport { withKnobs } from '@storybook/addon-knobs'\nimport \"./../common.css\";\n\ntype ModalType = {\n    /** 오픈할 팝업 El */\n    children: React.ReactElement;\n    /** 모달 닫히면 실행되는 이벤트 */\n    closeHandler?: Function;\n    /** 확인 버튼 명 */\n    confirm?: string;\n    /** ref */\n    ref?: any\n}\n\nexport const Modal = (manager: ModalType) => {\n    const [ isShow, setIsShow ] = useState(false);\n\n    const ModalManager = (props: ModalType) => {\n        const btnClickHandler = () => {\n            props.callbackFunc && props.callbackFunc();\n            setIsShow(false);\n        }\n\n        return (\n            <>\n            { isShow && \n            <div className=\"modal\">\n                <div className={\"modal-body\"}>\n                    {props.children}\n                    {props?.confirm && \n                        <button className=\"button\" \n                                onClick={btnClickHandler}\n                                ref={props.ref}\n                        >{props?.confirm}</button>\n                    }\n                </div>                \n            </div>\n            }\n            </>\n        )\n    }\n\n    return (\n        <div>\n            <button className=\"btn\" onClick={() => (setIsShow(true))}>\n                Modal\n            </button>\n            <ModalManager \n                children={manager.children} \n                confirm={manager.confirm}\n                ref={manager.ref}\n                callbackFunc={manager.callbackFunc}/>\n        </div>\n    );\n    \n};\nexport default {\n    component: Modal,\n    title: 'Core/Modal',\n    decorators: [withKnobs]\n}\n\nModal.args = {\n    children: <p>children</p>,\n    confirm: '확인',\n    callbackFunc: () => {}\n}\n\n\nModal.parameters = { storySource: { source: \"(manager: ModalType) => {\\n    const [ isShow, setIsShow ] = useState(false);\\n\\n    const ModalManager = (props: ModalType) => {\\n        const btnClickHandler = () => {\\n            props.callbackFunc && props.callbackFunc();\\n            setIsShow(false);\\n        }\\n\\n        return (\\n            <>\\n            { isShow && \\n            <div className=\\\"modal\\\">\\n                <div className={\\\"modal-body\\\"}>\\n                    {props.children}\\n                    {props?.confirm && \\n                        <button className=\\\"button\\\" \\n                                onClick={btnClickHandler}\\n                                ref={props.ref}\\n                        >{props?.confirm}</button>\\n                    }\\n                </div>                \\n            </div>\\n            }\\n            </>\\n        )\\n    }\\n\\n    return (\\n        <div>\\n            <button className=\\\"btn\\\" onClick={() => (setIsShow(true))}>\\n                Modal\\n            </button>\\n            <ModalManager \\n                children={manager.children} \\n                confirm={manager.confirm}\\n                ref={manager.ref}\\n                callbackFunc={manager.callbackFunc}/>\\n        </div>\\n    );\\n    \\n}\" }, ...Modal.parameters };"],"mappings":";;AACI;AACA;AACA;AACA,IAAIA,SAAS,GAAG,mwDAAmwD;AACnxD;AACA,IAAIC,iBAAiB,GAAG;EAAC,OAAO,EAAC;IAAC,UAAU,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,QAAQ,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,WAAW,EAAC;MAAC,KAAK,EAAC,EAAE;MAAC,MAAM,EAAC;IAAE,CAAC;IAAC,SAAS,EAAC;MAAC,KAAK,EAAC,CAAC;MAAC,MAAM,EAAC;IAAE;EAAC;AAAC,CAAC;AAEnK,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAO,iBAAiB;AAAC;AAAA;AAazB,OAAO,MAAMC,KAAK,GAAIC,OAAkB,IAAK;EAAA;EACzC,MAAM,CAAEC,MAAM,EAAEC,SAAS,CAAE,GAAGL,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMM,YAAY,GAAIC,KAAgB,IAAK;IACvC,MAAMC,eAAe,GAAG,MAAM;MAC1BD,KAAK,CAACE,YAAY,IAAIF,KAAK,CAACE,YAAY,EAAE;MAC1CJ,SAAS,CAAC,KAAK,CAAC;IACpB,CAAC;IAED,oBACI;MAAA,UACED,MAAM,iBACR;QAAK,SAAS,EAAC,OAAO;QAAA,uBAClB;UAAK,SAAS,EAAE,YAAa;UAAA,WACxBG,KAAK,CAACG,QAAQ,EACd,CAAAH,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,OAAO,kBACX;YAAQ,SAAS,EAAC,QAAQ;YAClB,OAAO,EAAEH,eAAgB;YACzB,GAAG,EAAED,KAAK,CAACK,GAAI;YAAA,UACrBL,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI;UAAO;YAAA;YAAA;YAAA;UAAA,QAAU;QAAA;UAAA;UAAA;UAAA;QAAA;MAE5B;QAAA;QAAA;QAAA;MAAA;IACJ,iBAEH;EAEX,CAAC;EAED,oBACI;IAAA,wBACI;MAAQ,SAAS,EAAC,KAAK;MAAC,OAAO,EAAE,MAAON,SAAS,CAAC,IAAI,CAAG;MAAA,UAAC;IAE1D;MAAA;MAAA;MAAA;IAAA,QAAS,eACT,QAAC,YAAY;MACT,QAAQ,EAAEF,OAAO,CAACO,QAAS;MAC3B,OAAO,EAAEP,OAAO,CAACQ,OAAQ;MACzB,GAAG,EAAER,OAAO,CAACS,GAAI;MACjB,YAAY,EAAET,OAAO,CAACM;IAAa;MAAA;MAAA;MAAA;IAAA,QAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QACvC;AAGd,CAAC;AAAC,GAzCWP,KAAK;AAAA,KAALA,KAAK;AA0ClB,eAAe;EACXW,SAAS,EAAEX,KAAK;EAChBY,KAAK,EAAE,YAAY;EACnBC,UAAU,EAAE,CAACd,SAAS;AAC1B,CAAC;AAEDC,KAAK,CAACc,IAAI,GAAG;EACTN,QAAQ,eAAE;IAAA,UAAG;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAI;EACzBC,OAAO,EAAE,IAAI;EACbF,YAAY,EAAE,MAAM,CAAC;AACzB,CAAC;AAGDP,KAAK,CAACe,UAAU,GAAG;EAAEC,WAAW,EAAE;IAAEC,MAAM,EAAE;EAAytC,CAAC;EAAE,GAAGjB,KAAK,CAACe;AAAW,CAAC;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}